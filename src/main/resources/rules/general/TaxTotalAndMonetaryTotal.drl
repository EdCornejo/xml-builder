package rules;

import org.openublpe.xmlbuilder.models.input.general.AbstractInputDocumentModel;
import org.openublpe.xmlbuilder.models.output.general.AbstractOutputDocumentModel;
import org.openublpe.xmlbuilder.models.output.general.ImpuestoOutputModel;
import org.openublpe.xmlbuilder.models.output.general.DetalleOutputModel;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.stream.Stream;
import org.openublpe.xmlbuilder.models.ubl.Catalog5;
import org.openublpe.xmlbuilder.models.ubl.Catalog7;
import org.openublpe.xmlbuilder.models.ubl.Catalog7_1

dialect "java"

rule "Tax Total and Monetary Total" salience -1
when
    $input : AbstractInputDocumentModel()
    $output : AbstractOutputDocumentModel()
then
    // TOTAL IMPUESTOS
    BigDecimal totalIGV = $output.getDetalle()
        .stream()
        .map(f -> f.getIgv().getImporte())
        .reduce(BigDecimal.ZERO, BigDecimal::add);

    $output.setImporteTotalImpuestos(totalIGV);

    // TOTAL IMPUESTOS - SUBTOTALES
    $output.setTotalImpuestos(new ArrayList<>());

    // gravado
    java.util.function.Supplier<Stream<DetalleOutputModel>> totalGravadoStream = () -> $output.getDetalle().stream().filter(g -> g.getIgv().getTipo().getGrupo().equals(Catalog7_1.GRAVADO));
    BigDecimal importeTotalGravado = totalGravadoStream.get().map(f -> f.getIgv().getImporte()).reduce(BigDecimal.ZERO, BigDecimal::add);
    BigDecimal baseImponibleTotalGravado = totalGravadoStream.get().map(f -> f.getIgv().getBaseImponible()).reduce(BigDecimal.ZERO, BigDecimal::add);

    if (baseImponibleTotalGravado.compareTo(BigDecimal.ZERO) > 0) {
        ImpuestoOutputModel totalGravado = new ImpuestoOutputModel();
        totalGravado.setImporte(importeTotalGravado);
        totalGravado.setBaseImponible(baseImponibleTotalGravado);
        totalGravado.setCategoria(Catalog5.IGV);

        $output.getTotalImpuestos().add(totalGravado);
    }

    // exonerado
    java.util.function.Supplier<Stream<DetalleOutputModel>> totalExoneradoStream = () -> $output.getDetalle().stream().filter(e -> e.getIgv().getTipo().getGrupo().equals(Catalog7_1.EXONERADO));
    BigDecimal importeTotalExonerado = totalExoneradoStream.get().map(f -> f.getIgv().getImporte()).reduce(BigDecimal.ZERO, BigDecimal::add);
    BigDecimal baseImponibleTotalExonerado = totalExoneradoStream.get().map(f -> f.getIgv().getBaseImponible()).reduce(BigDecimal.ZERO, BigDecimal::add);

    if (baseImponibleTotalExonerado.compareTo(BigDecimal.ZERO) > 0) {
        ImpuestoOutputModel totalExonerado = new ImpuestoOutputModel();
        totalExonerado.setImporte(importeTotalExonerado);
        totalExonerado.setBaseImponible(baseImponibleTotalExonerado);
        totalExonerado.setCategoria(Catalog5.EXONERADO);

        $output.getTotalImpuestos().add(totalExonerado);
    }

    // inafecto
    java.util.function.Supplier<Stream<DetalleOutputModel>> totalInafectoStream = () -> $output.getDetalle().stream().filter(i -> i.getIgv().getTipo().getGrupo().equals(Catalog7_1.INAFECTO));
    BigDecimal importeTotalInafecto = totalInafectoStream.get().map(f -> f.getIgv().getImporte()).reduce(BigDecimal.ZERO, BigDecimal::add);
    BigDecimal baseImponibleTotalInafecto = totalInafectoStream.get().map(f -> f.getIgv().getBaseImponible()).reduce(BigDecimal.ZERO, BigDecimal::add);

    if (baseImponibleTotalInafecto.compareTo(BigDecimal.ZERO) > 0) {
        ImpuestoOutputModel totalInafecto = new ImpuestoOutputModel();
        totalInafecto.setImporte(importeTotalInafecto);
        totalInafecto.setBaseImponible(baseImponibleTotalInafecto);
        totalInafecto.setCategoria(Catalog5.INAFECTO);

        $output.getTotalImpuestos().add(totalInafecto);
    }

    // TOTAL PAYABLE
     BigDecimal importeTotal = $output.getDetalle()
            .stream()
            .map(DetalleOutputModel::getTotal)
            .reduce(BigDecimal.ZERO, BigDecimal::add);

    $output.setTotalValorVenta(null);
    $output.setTotalPrecioVenta(null);
    $output.setTotalDescuentos(null);
    $output.setTotalOtrosCargos(null);
    $output.setImporteTotal(importeTotal);
end
