package rules;

import org.openublpe.xmlbuilder.models.input.general.AbstractInputDocumentModel;
import org.openublpe.xmlbuilder.models.output.general.AbstractOutputDocumentModel;
import org.openublpe.xmlbuilder.models.input.general.DetalleInputModel;
import org.openublpe.xmlbuilder.models.output.general.DetalleOutputModel;
import org.openublpe.xmlbuilder.models.output.general.DetalleImpuestoOutputModel;
import org.openublpe.xmlbuilder.models.output.general.PrecioReferenciaOutputModel;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.math.RoundingMode;

import org.openublpe.xmlbuilder.models.ubl.Catalog;
import org.openublpe.xmlbuilder.models.ubl.Catalog7;
import org.openublpe.xmlbuilder.models.ubl.Catalog16
import org.openublpe.xmlbuilder.models.ubl.Catalog5
import org.openublpe.xmlbuilder.models.ubl.Catalog7_1;

import function org.openublpe.xmlbuilder.utils.NumberUtils.format2Digists;

global java.math.BigDecimal IGV;

dialect "java"

rule "Detalle Item"
when
    $input : AbstractInputDocumentModel(detalle != null)
    $output : AbstractOutputDocumentModel()
    $inputDetalle: DetalleInputModel()
then
    DetalleOutputModel outputDetalle = new DetalleOutputModel();
    outputDetalle.setIgv(new DetalleImpuestoOutputModel());

    $output.getDetalle().add(outputDetalle);


    // DEFAULT VALUES
    String DEFAULT_UNIDAD_MEDIDA = "NIU";
    Catalog7 DEFAULT_TIPO_IGV = Catalog7.GRAVADO_OPERACION_ONEROSA;


    // Descripcion, unidad de medida
    outputDetalle.setDescripcion($inputDetalle.getDescripcion());
    outputDetalle.setUnidadMedida($inputDetalle.getUnidadMedida() != null ? $inputDetalle.getUnidadMedida() : DEFAULT_UNIDAD_MEDIDA);

    // Cantidad
    BigDecimal cantidad = $inputDetalle.getCantidad();
    outputDetalle.setCantidad(cantidad);

    // Precio unitario
    BigDecimal precioUnitario = $inputDetalle.getPrecioUnitario();
    outputDetalle.setPrecioUnitario(precioUnitario);

    // Tipo IGV
    Catalog7 tipoIgv = $inputDetalle.getTipoIGV() != null
        ? Catalog.valueOfCode(Catalog7.class, $inputDetalle.getTipoIGV()).get()
        : DEFAULT_TIPO_IGV;

    outputDetalle.getIgv().setTipo(tipoIgv);
    outputDetalle.getIgv().setCategoria(tipoIgv.getTaxCategory());

    // IGV value
    BigDecimal IGV_TO_USE = tipoIgv.getGrupo().equals(Catalog7_1.GRAVADO)
        ? IGV
        : BigDecimal.ZERO;

    BigDecimal igvPorcentual = IGV_TO_USE.multiply(new BigDecimal("100"));
    outputDetalle.setIgvPorcentual(igvPorcentual);

    // Total
    BigDecimal total = format2Digists(cantidad.multiply(precioUnitario));
    outputDetalle.setTotal(total);

    // Subtotal
    BigDecimal subTotal = total.divide(IGV_TO_USE.add(BigDecimal.ONE), 2, RoundingMode.HALF_EVEN);

    // importe igv
    BigDecimal importeIgv = total.subtract(subTotal);

    // IGV
    outputDetalle.getIgv().setBaseImponible(subTotal);
    outputDetalle.getIgv().setImporte(importeIgv);

    // Precios de referencia
    outputDetalle.setPreciosDeReferencia(new ArrayList<>());

    if (tipoIgv.isOperacionOnerosa()) {
        outputDetalle.setSubtotal(subTotal);

        // Valor unitario
        BigDecimal valorUnitario = subTotal.divide(cantidad, 2, RoundingMode.HALF_EVEN);
        outputDetalle.setValorUnitario(valorUnitario);

        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(precioUnitario, Catalog16.PRECIO_UNITARIO_INCLUYE_IGV));
    } else {
        outputDetalle.setSubtotal(total);

        // Valor unitario
        outputDetalle.setValorUnitario(BigDecimal.ZERO);

        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(precioUnitario, Catalog16.VALOR_FERENCIAL_UNITARIO_EN_OPERACIONES_NO_ONEROSAS));
    }
end