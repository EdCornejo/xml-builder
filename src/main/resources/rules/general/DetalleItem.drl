package rules;

import org.openublpe.xmlbuilder.models.input.general.AbstractInputDocumentModel;
import org.openublpe.xmlbuilder.models.output.general.AbstractOutputDocumentModel;
import org.openublpe.xmlbuilder.models.input.general.DetalleInputModel;
import org.openublpe.xmlbuilder.models.output.general.DetalleOutputModel;
import org.openublpe.xmlbuilder.models.output.general.DetalleImpuestoOutputModel;
import org.openublpe.xmlbuilder.models.output.general.PrecioReferenciaOutputModel;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.math.RoundingMode;

import org.openublpe.xmlbuilder.models.ubl.Catalog;
import org.openublpe.xmlbuilder.models.ubl.Catalog7;
import org.openublpe.xmlbuilder.models.ubl.Catalog16;

import function org.openublpe.xmlbuilder.utils.NumberUtils.format2Digists;

global java.math.BigDecimal IGV;

dialect "java"

rule "Detalle Item"
when
    $input : AbstractInputDocumentModel(detalle != null)
    $output : AbstractOutputDocumentModel()
    $inputDetalle: DetalleInputModel()
then
    DetalleOutputModel outputDetalle = new DetalleOutputModel();
    outputDetalle.setIgv(new DetalleImpuestoOutputModel());

    $output.getDetalle().add(outputDetalle);

    // DEFAULT VALUES
    String DEFAULT_UNIDAD_MEDIDA = "NIU";
    Catalog7 DEFAULT_TIPO_IGV = Catalog7.GRAVADO_OPERACION_ONEROSA;


    // IGV porcentual
    BigDecimal igvPorcentual = IGV.multiply(new BigDecimal("100"));
    outputDetalle.setIgvPorcentual(igvPorcentual);

    // Descripcion, unidad de medida
    outputDetalle.setDescripcion($inputDetalle.getDescripcion());
    outputDetalle.setUnidadMedida($inputDetalle.getUnidadMedida() != null ? $inputDetalle.getUnidadMedida() : DEFAULT_UNIDAD_MEDIDA);

    // Cantidad
    BigDecimal cantidad = $inputDetalle.getCantidad();
    outputDetalle.setCantidad(cantidad);

    // Precio unitario
    BigDecimal precioUnitario = $inputDetalle.getPrecioUnitario();
    outputDetalle.setPrecioUnitario(precioUnitario);

    // Tipo IGV
    Catalog7 tipoIgv = $inputDetalle.getTipoIGV() != null ? Catalog.valueOfCode(Catalog7.class, $inputDetalle.getTipoIGV()).get() : DEFAULT_TIPO_IGV;

    // Valor unitario
    BigDecimal valorUnitario = tipoIgv.isOperacionOnerosa()
        ? precioUnitario.divide(BigDecimal.ONE.add(IGV), 2, RoundingMode.HALF_EVEN)
        : BigDecimal.ZERO;
    outputDetalle.setValorUnitario(valorUnitario);

    // Total
    BigDecimal total = cantidad.multiply(precioUnitario);
    outputDetalle.setTotal(format2Digists(total));

    // IGV
    BigDecimal importeIgv = valorUnitario.multiply(cantidad).multiply(IGV);

    // Subtotal
    BigDecimal subTotal = tipoIgv.isOperacionOnerosa()
        ? total.subtract(importeIgv)
        : BigDecimal.ZERO;

    outputDetalle.setSubtotal(format2Digists(subTotal));

    BigDecimal baseImponible = subTotal;
    outputDetalle.getIgv().setTipo(tipoIgv);
    outputDetalle.getIgv().setCategoria(tipoIgv.getTaxCategory());
    outputDetalle.getIgv().setBaseImponible(format2Digists(baseImponible));
    outputDetalle.getIgv().setImporte(format2Digists(importeIgv));

    // Precios de referencia
    outputDetalle.setPreciosDeReferencia(new ArrayList<>());

    if (tipoIgv.isOperacionOnerosa()) {
        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(precioUnitario, Catalog16.PRECIO_UNITARIO_INCLUYE_IGV));
    } else {
//        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(BigDecimal.ZERO, Catalog16.VALOR_FERENCIAL_UNITARIO_EN_OPERACIONES_NO_ONEROSAS));
//        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(precioUnitario, Catalog16.PRECIO_UNITARIO_INCLUYE_IGV));
        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(BigDecimal.ZERO, Catalog16.PRECIO_UNITARIO_INCLUYE_IGV));
//        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(precioUnitario, Catalog16.VALOR_FERENCIAL_UNITARIO_EN_OPERACIONES_NO_ONEROSAS));
    }
end