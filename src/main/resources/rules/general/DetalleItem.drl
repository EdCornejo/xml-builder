package rules;

import org.openublpe.xmlbuilder.models.input.general.AbstractInputDocumentModel;
import org.openublpe.xmlbuilder.models.output.general.AbstractOutputDocumentModel;
import org.openublpe.xmlbuilder.models.input.general.DetalleInputModel;
import org.openublpe.xmlbuilder.models.output.general.DetalleOutputModel;
import org.openublpe.xmlbuilder.models.output.general.ImpuestoOutputModel;
import org.openublpe.xmlbuilder.models.output.general.PrecioReferenciaOutputModel;

import java.math.BigDecimal;
import java.util.ArrayList;

import org.openublpe.xmlbuilder.models.ubl.Catalog;
import org.openublpe.xmlbuilder.models.ubl.Catalog7;
import org.openublpe.xmlbuilder.models.ubl.Catalog16

global java.math.BigDecimal IGV;

dialect "java"

rule "Detalle Item"
when
    $input : AbstractInputDocumentModel(detalle != null)
    $output : AbstractOutputDocumentModel()
    $inputDetalle: DetalleInputModel()
then
    DetalleOutputModel outputDetalle = new DetalleOutputModel();
    outputDetalle.setIgv(new ImpuestoOutputModel());
    outputDetalle.setPreciosDeReferencia(new ArrayList<>());

    $output.getDetalle().add(outputDetalle);

    // Default values
    String DEFAULT_UNIDAD_MEDIDA = "NIU";
    Catalog7 DEFAULT_TIPO_IGV = Catalog7.GRAVADO_OPERACION_ONEROSA;

    // Descripcion, unidad de medida, cantidad
    outputDetalle.setDescripcion($inputDetalle.getDescripcion());
    outputDetalle.setUnidadMedida($inputDetalle.getUnidadMedida() != null ? $inputDetalle.getUnidadMedida() : DEFAULT_UNIDAD_MEDIDA);
    outputDetalle.setCantidad($inputDetalle.getCantidad());

    // Precio unitario
    outputDetalle.setPrecioUnitario($inputDetalle.getPrecioUnitario());

    // Valor unitario
    BigDecimal valorUnitario = $inputDetalle.getPrecioUnitario().multiply(BigDecimal.ONE.subtract(IGV));
    outputDetalle.setValorUnitario(valorUnitario);

    // Total
    BigDecimal total = $inputDetalle.getCantidad().multiply($inputDetalle.getPrecioUnitario());
    outputDetalle.setTotal(total);

    // Subtotal
    BigDecimal subTotal = $inputDetalle.getCantidad().multiply(outputDetalle.getValorUnitario());
    outputDetalle.setSubtotal(subTotal);

    // igv
    Catalog7 tipoIgv = $inputDetalle.getTipoIGV() != null ? Catalog.valueOfCode(Catalog7.class, $inputDetalle.getTipoIGV()).get() : DEFAULT_TIPO_IGV;
    BigDecimal importeIgv = tipoIgv.isGravado() ? outputDetalle.getTotal().multiply(IGV) : BigDecimal.ZERO;
    outputDetalle.getIgv().setTipo(tipoIgv);
    outputDetalle.getIgv().setCategoria(tipoIgv.getTaxCategory());
    outputDetalle.getIgv().setBaseImponible(total);
    outputDetalle.getIgv().setImporte(importeIgv);

    // Precios de referencia
    if (tipoIgv.isOperacionOnerosa()) {
        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel($inputDetalle.getPrecioUnitario(), Catalog16.PRECIO_UNITARIO_INCLUYE_IGV));
    } else {
        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel(BigDecimal.ZERO, Catalog16.VALOR_FERENCIAL_UNITARIO_EN_OPERACIONES_NO_ONEROSAS));
        outputDetalle.getPreciosDeReferencia().add(new PrecioReferenciaOutputModel($inputDetalle.getPrecioUnitario(), Catalog16.PRECIO_UNITARIO_INCLUYE_IGV));
    }

end